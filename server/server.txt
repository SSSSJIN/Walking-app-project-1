const express = require('express');
const oracledb = require('oracledb');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();

// 미들웨어 설정
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(cors());

// 정적 파일 제공 (업로드된 이미지)
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Oracle DB 연결 설정
const dbConfig = {
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    connectString: process.env.DB_CONNECT_STRING
};

// 연결 풀 초기화
async function initializeDB() {
    try {
        await oracledb.createPool({
            ...dbConfig,
            poolMin: 2,
            poolMax: 10,
            poolIncrement: 1,
            poolTimeout: 300
        });
        console.log('✅ Oracle DB 연결 풀 생성 완료');
    } catch (err) {
        console.error('❌ DB 연결 실패:', err);
        process.exit(1);
    }
}

// 라우터 import
const pathRoutes = require('./routes/paths');
const postRoutes = require('./routes/posts');

// 라우터 사용
app.use('/api/paths', pathRoutes);
app.use('/api/posts', postRoutes);

// 서버 시작
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
    await initializeDB();
    console.log(`🚀 서버가 ${PORT}번 포트에서 실행중입니다.`);
});

// 종료 시 연결 풀 정리
process.on('SIGINT', async () => {
    try {
        await oracledb.getPool().close();
        console.log('DB 연결 풀 종료');
        process.exit(0);
    } catch (err) {
        console.error('종료 중 오류:', err);
        process.exit(1);
    }
});
