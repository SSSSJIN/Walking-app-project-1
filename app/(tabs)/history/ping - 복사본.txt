import React, { useState, useRef } from 'react';
import { View, Button, Text, ScrollView, StyleSheet, Dimensions, TextInput, Alert, Platform } from 'react-native';
import MapView, { Marker, Polyline, MapEvent } from 'react-native-maps';
import PathService from '../../../services/PathService';

export default function PingScreen() {
  const [isRecording, setIsRecording] = useState(false);
  const [coordinates, setCoordinates] = useState<{ latitude: number; longitude: number }[]>([]);
  const [pathName, setPathName] = useState('');
  const mapRef = useRef<MapView>(null);

  const handleMapPress = (e: MapEvent) => {
    if (isRecording && e.nativeEvent?.coordinate) {
      const { latitude, longitude } = e.nativeEvent.coordinate;
      setCoordinates(prev => [...prev, { latitude, longitude }]);
    }
  };

  const resetRecording = () => {
    setCoordinates([]);
    setPathName('');
    Alert.alert('초기화 완료', '모든 기록이 삭제되었습니다.');
  };

  const saveToDatabase = async () => {
    if (coordinates.length === 0) {
      Alert.alert('경고', '저장할 경로가 없습니다.');
      return;
    }

    try {
      const result = await PathService.saveGPSRecord({
        pathName: pathName || '무제 경로',
        coordinates: coordinates.map((point, index) => ({
          lat: point.latitude,
          lng: point.longitude,
          type: index === 0 ? 'START' : 
                index === coordinates.length - 1 ? 'END' : 'WAYPOINT',
          order: index + 1
        })),
        totalDistance: calculateDistance(coordinates),
        estimatedTime: calculateTime(coordinates)
      });

      if (result.success) {
        Alert.alert('저장 성공', '경로가 데이터베이스에 저장되었습니다.');
        setCoordinates([]);
        setPathName('');
      }
    } catch (error) {
      Alert.alert('저장 실패', error.message);
    }
  };

  // 거리 및 시간 계산 함수 (gps.tsx와 동일)
  const calculateDistance = (points: any[]) => points.length * 0.01;
  const calculateTime = (points: any[]) => points.length * 2;

  return (
    <View style={styles.container}>
      <View style={styles.buttonContainer}>
        <Button
          title={isRecording ? '기록 중지' : '기록 시작'}
          onPress={() => {
            if (isRecording) {
              setIsRecording(false);
            } else {
              setCoordinates([]);
              setIsRecording(true);
            }
          }}
        />
        {!isRecording && coordinates.length > 0 && (
          <>
            <Button title="기록 초기화" onPress={resetRecording} color="#e74c3c" />
            <Button title="DB 저장" onPress={saveToDatabase} color="#2ecc71" />
            <TextInput
              style={styles.input}
              placeholder="경로 이름 입력"
              value={pathName}
              onChangeText={setPathName}
            />
          </>
        )}
      </View>

      <MapView
        ref={mapRef}
        style={styles.map}
        onPress={handleMapPress}
        initialRegion={{
          latitude: 37.5665,
          longitude: 126.9780,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        }}
      >
        {coordinates.map((coord, idx) => (
          <Marker
            key={idx}
            coordinate={coord}
            title={idx === 0 ? '시작점' : idx === coordinates.length - 1 ? '도착점' : `경유지 ${idx}`}
          />
        ))}
        {coordinates.length > 1 && (
          <Polyline
            coordinates={coordinates}
            strokeColor="#e74c3c"
            strokeWidth={4}
          />
        )}
      </MapView>

      {!isRecording && coordinates.length > 0 && (
        <ScrollView style={styles.listContainer}>
          <Text style={styles.listTitle}>기록된 좌표 ({coordinates.length}개)</Text>
          {coordinates.map((c, idx) => (
            <Text key={idx} style={styles.coordText}>
              {idx + 1}. 위도: {c.latitude.toFixed(6)}, 경도: {c.longitude.toFixed(6)}
            </Text>
          ))}
        </ScrollView>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  map: { flex: 0.7, width: Dimensions.get('window').width },
  buttonContainer: { margin: 10, gap: 10 },
  listContainer: { flex: 0.3, padding: 10 },
  listTitle: { fontWeight: 'bold', marginBottom: 5 },
  coordText: { fontSize: 14, marginBottom: 2 },
  input: { 
    borderWidth: 1, 
    borderColor: '#ddd', 
    padding: 8, 
    marginVertical: 5 
  }
});
